<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="2.4.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2016-10-14T15:12:02+01:00</updated><id>/</id><title type="html">GYMPY: Combining OpenAI Gym with GPy for Robotic Control</title><subtitle>This blog will detail a part of my (Janith&#39;s) journey through applying GP based machine learning techniques to the control of motile robots, starting with the robotic arm.
</subtitle><entry><title type="html">Python-Yarp Interface</title><link href="/jekyll/update/2016/10/14/Python---Yarp-Interface.html" rel="alternate" type="text/html" title="Python-Yarp Interface" /><published>2016-10-14T10:17:05+01:00</published><updated>2016-10-14T10:17:05+01:00</updated><id>/jekyll/update/2016/10/14/Python---Yarp-Interface</id><content type="html" xml:base="/jekyll/update/2016/10/14/Python---Yarp-Interface.html">&lt;p&gt;In order to get started with the project, it was necessary for me to get used to using YARP in conjunction with python. YARP, to me, sounds like a communication platform that allows for different modules of code, written in different languages to communicate with each other; it provides the tools to allow data to be transferred between these modules robustly.
The exercises that I carried out in order to master this are listed belows, with a few words about their relevance.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The first exercise I completed was to create a simply python script that can take in messages from a &lt;em&gt;/write&lt;/em&gt; port, and pass these on to a &lt;em&gt;/read&lt;/em&gt; port. This exercise outlays the basic functionality of yarp, and how it can be utilised through python.&lt;/p&gt;

    &lt;p&gt;The jupyter notebook that contains my code for this exercise can be found &lt;a href=&quot;/downloads/basicPython.ipynb&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Following this, similar functionality was expressed in a different way using a &lt;a href=&quot;http://www.yarp.it/classyarp_1_1os_1_1RFModule.html&quot;&gt;RF module&lt;/a&gt;. This interesting module contains 2 loops that run simulataneously (or to be more technical, in parallel). One of them loops infinitely at intervals that are defined in the class, while the other looks for a command from a &lt;a href=&quot;http://www.yarp.it/rpc_ports.html&quot;&gt;RPC port&lt;/a&gt;, and runs a &lt;em&gt;respond()&lt;/em&gt; method when it receives one. &lt;em&gt;respond()&lt;/em&gt; is then able to send a reply to the RPC port (it waits for one), and also carry out other functions that are only executed when a command is received.&lt;/p&gt;

    &lt;p&gt;If that didn’t make much sense, check out the code &lt;a href=&quot;/downloads/pythonRFMod.ipynb&quot;&gt;here&lt;/a&gt;. In this, I have implemented what was done in the previous exercise, but also made it such that messages are sent to &lt;em&gt;/read&lt;/em&gt; only when the command &lt;strong&gt;print&lt;/strong&gt; is recieved from the &lt;em&gt;RPC Port&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Later on in my project, I will need to make use of information received from a camera in the form of a &lt;em&gt;yarp&lt;/em&gt; image. As such, my final exercise for this week was to replace the messages replied in the form of text in the previous exercise with images from my webcam.&lt;/p&gt;

    &lt;p&gt;As with the previous exercise, the program is to display the inputs it gets from the yarp port which sends out the data from the webcam (named &lt;em&gt;/grabber&lt;/em&gt;) on one output port (named &lt;em&gt;/internalView&lt;/em&gt; in my code). A RPC port will still send out commands; when it sends out the command &lt;strong&gt;capture&lt;/strong&gt;, a still image of the most recent image sent by &lt;em&gt;/grabber&lt;/em&gt; will be shown on a separate port (named &lt;em&gt;/pictureView&lt;/em&gt; in my code).   &lt;/p&gt;

    &lt;p&gt;In my first attempt, I cheated a little bit, and completed the task without using the processes that would have allowed me to learn what I will need from this exercise. The main point of this exercise was to look at how a yarp image could be imported as a numpy array. The numpy array could then be manipulated and used how I like; this, in other words, allows the images received from a camera to be used as an input source for the code I wrote for this exercise, and for the code I will write in the future. Furthermore, this introduced the code structures that allow for this kind of data transfer; hopefully this practice will be useful in the future when handling different kinds of data.&lt;/p&gt;

    &lt;p&gt;In the code &lt;a href=&quot;/downloads/imageRFMod.ipynb&quot;&gt;here&lt;/a&gt;, to prove that I have indeed transferred the yarp image to a numpy array, I have added a block of black pixels on the top left corner to the output video and image.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><summary type="html">In order to get started with the project, it was necessary for me to get used to using YARP in conjunction with python. YARP, to me, sounds like a communication platform that allows for different modules of code, written in different languages to communicate with each other; it provides the tools to allow data to be transferred between these modules robustly.
The exercises that I carried out in order to master this are listed belows, with a few words about their relevance.</summary></entry><entry><title type="html">Initial Testing Post!</title><link href="/jekyll/update/2016/10/07/Initial-Post.html" rel="alternate" type="text/html" title="Initial Testing Post!" /><published>2016-10-07T14:21:05+01:00</published><updated>2016-10-07T14:21:05+01:00</updated><id>/jekyll/update/2016/10/07/Initial-Post</id><content type="html" xml:base="/jekyll/update/2016/10/07/Initial-Post.html">&lt;p&gt;This post is to test if I have learned the basics of Jekyll: if you can see this, then I have been successful!&lt;/p&gt;

&lt;p&gt;For those of you who came, here’s a &lt;a href=&quot;/pictures/initialPost_1.gif&quot;&gt;motivational picture&lt;/a&gt;.&lt;/p&gt;</content><summary type="html">This post is to test if I have learned the basics of Jekyll: if you can see this, then I have been successful!</summary></entry></feed>
